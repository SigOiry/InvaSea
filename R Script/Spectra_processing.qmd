---
title: "Spectra_Processing"
author: "Simon Oiry"
format: html
editor: source
editor_options: 
  chunk_output_type: console
---

```{r Library}
library(tidyverse)
library(Utilities.Package)
library(terra)
library(tidyterra)
```

```{r data opening}

df <-  read_table("Data/CSV/all_spectra.csv")

df_long <- df %>% 
  pivot_longer(-Wavelength, names_to = "Name",values_to = "ref") %>% 
  mutate(Name = gsub(".asd","",Name),
         Spectra = as.numeric(gsub("\\D", "", Name)),
         dataset_Name = gsub("[[:digit:]]","",Name),
         dataset_Name = gsub("GRA-","",dataset_Name))

```

```{r loop across notebooks}

notebooks <- list.files("./Data/Notebook", full.names = T) %>% 
  as.data.frame() %>% 
  rename(path = ".") %>% 
  mutate(name = gsub(".*/","",path),
         site = gsub(".*_","",name) %>% gsub(".txt","",.))

for(i in 1:nrow(notebooks)){
  
  nb <- read.delim(notebooks$path[i])%>% 
      dplyr::filter(Obs == "Gracilaria")
  print(unique(nb$Site))
  
  if(unique(nb$Site) %in% c("BEL","MORB")){
    nb <- nb %>% 
      mutate(Start = Start+100000,
             End = End+100000)
  }else if(unique(nb$Site) %in% c("SCORFF","AULNE")){
     nb <- nb %>% 
      mutate(Start = Start+200000,
             End = End+200000) %>% 
      dplyr::filter(Sample != 21)
     
  }else if (unique(nb$Site) == "BER"){
    nb <- nb %>% 
      mutate(Letter_new = case_when(Letter == "B"~"D",
                                    Letter == "C"~"B",
                                    Letter == "D"~"C",
                                    TRUE ~ Letter),
             Letter = Letter_new) %>% 
      dplyr::select(-Letter_new)
      
    
  }else if(unique(nb$Site) == "VIE"){
        nb <- nb %>% 
      mutate(Letter_new = case_when(Letter == "A"~"C",
                                    Letter %in% c("B","C") ~"A",
                                    Letter %in% c("D","E")~"B",
                                    TRUE ~ Letter),
             Letter = Letter_new) %>% 
      dplyr::select(-Letter_new)
    
  }else if(unique(nb$Site) == "VAN"){
    
    # No need to change the letters, it's already the righ ones in the notebook
    
  }
  
  for(ii in 1:nrow(nb)){
  
    a <- df_long %>% 
      dplyr::filter(dataset_Name == unique(nb$Site),
                    Spectra %in% c(nb$Start[ii]:nb$End[ii])) %>% 
      mutate(Sample = nb$Sample[ii],
             Letter = nb$Letter[ii],
             Obs = nb$Obs[ii])
    
    if(ii == 1){
      output <- a
    }  else{
      output <- output %>% 
        rbind(a)
    }
  
  }

  write.csv(output, paste0("Data/CSV/RAW_",unique(nb$Site),"_Spectra.csv"))
  
}

```

```{r loop plotting across CSV}


CSV_sites <- list.files("./Data/CSV", full.names = T) %>% 
  as.data.frame() %>% 
  rename(path = ".") %>% 
  mutate(name = gsub(".*/","",path) %>% gsub(".csv","",.)) %>% 
  filter(!name %in% c("all_spectra"))

for(i in 1:nrow(CSV_sites)){
  
  print(paste0(i,"/",nrow(CSV_sites)))
  
  df <- read.csv(CSV_sites$path[i]) %>% 
    select(-X) %>% 
  dplyr::filter(Wavelength >= 400,
                Wavelength <= 950,
                Letter %in% c("A","B","C","Field"))
  
  for(ii in 1:length(unique(df$Sample))){
    
    a <- df %>% 
      dplyr::filter(Sample == unique(df$Sample)[ii])
    
    plt <- ggplot(a)+
      geom_line(aes(x = Wavelength, y=ref, group = Name, color = as.factor(Letter)))+
      geom_text(aes(x = 400, y = max(ref)-(max(ref)-min(ref))*0.1, label = paste0("Sample: ", unique(Sample))),
              size = 5, hjust = 0)+
    scale_color_manual(values = c("grey40" ,"yellow4","red"),
                       breaks = c("A",
                                  "B",
                                  "C"), 
                       labels = c("A -  Sparse on Table", "B - Sparse on Sediment" ,"C - High density"))+
      labs(color = " ")+
      theme_Bede()
    
    ggsave(paste0("Plot/", unique(a$dataset_Name),"/Sample_",unique(df$Sample)[ii],".png"), plt)
    
  }
}

```

```{r loop STD across CSV}

CSV_sites <- list.files("./Data/CSV", full.names = T) %>% 
  as.data.frame() %>% 
  rename(path = ".") %>% 
  mutate(name = gsub(".*/","",path) %>% gsub(".csv","",.)) %>% 
  filter(!name %in% c("Etel","ASD_Etel_October2023","all_spectra"))


for(i in 1:nrow(CSV_sites)){
  
  site = CSV_sites$name[i] %>% 
    gsub("RAW_","",.) %>% 
    gsub("_Spectra","",.)
  print(i)
  
  if(!file.exists(paste0("Output/",site,"_STD.csv"))){
     
  
    df <- read.csv(CSV_sites$path[i]) %>% 
      select(-X) %>% 
    dplyr::filter(Wavelength >= 400,
                  Wavelength <= 900) %>% 
    group_by(Name) %>% 
    reframe(STD = (ref - min(ref))/(max(ref)-min(ref)),
            Wavelength = Wavelength,
            ref = ref,
            Spectra = Spectra,
            dataset_Name = dataset_Name,
            Sample = Sample,
            Letter = Letter,
            Obs = Obs) 
    
    df_STD <- df %>% 
    group_by(Wavelength, Sample, Letter) %>%
    reframe(mean_STD = mean(STD),
            mean_RAW = mean(ref),
            dataset_Name = unique(dataset_Name)) %>% 
      mutate(ID = paste(dataset_Name,Sample,Letter, sep = "_"))
    
    write_csv(df_STD, paste0("Output/",unique(df_STD$dataset_Name),"_STD.csv"))
    
    rm(df)
    rm(df_STD) 
    
  }
  
}



```

```{r Process AV}

notebooks <- list.files("./Data/Notebook", full.names = T) %>% 
  as.data.frame() %>% 
  rename(path = ".") %>% 
  mutate(name = gsub(".*/","",path),
         site = gsub(".*_","",name) %>% gsub(".txt","",.))


df_without_notebooks <- df_long %>% 
  filter(!dataset_Name %in% notebooks$site)

unique(df_without_notebooks$dataset_Name)


df_AV <- df_without_notebooks %>% 
  filter(dataset_Name == "AV",
         !Name == "AV0100011") 


for (i in 1:22) {
  
  if (i == 1) {
    start = 0
    end = 9
  }else{
    start = start +10
    end = end + 10
  }
  
  names_i <- unique(df_AV$Name)[c(start:end)]
  
  a <- df_AV %>% 
    dplyr::filter(Name %in% names_i) %>% 
  dplyr::filter(Wavelength >= 400,
                Wavelength <= 900) %>% 
    group_by(Wavelength) %>% 
    reframe(mean_RAW = mean(ref),
            dataset_Name = unique(dataset_Name)) %>% 
    mutate(mean_STD = (mean_RAW - min(mean_RAW))/(max(mean_RAW)-min(mean_RAW)),
           Sample = i,
           Letter = "Field", 
           ID = paste(dataset_Name,Sample,Letter, sep = "_")) %>% 
    relocate(Wavelength,Sample,Letter,mean_STD,mean_RAW,dataset_Name,ID)
  
  if (i == 1) {
    output = a
    
  }else{
    output = rbind(output,a)
  }
}

 write_csv(output, paste0("Output/AV_STD.csv"))

```

```{r Process Etel}

df_ETE <- read.csv("Data/CSV/Etel/RAW_ASD_Etel_October2023.csv") %>% 
  dplyr::select(-X) %>%
  mutate(group = case_when(str_detect(spectra_name, "GRA01") ~ "GRA01",
                           str_detect(spectra_name, "GRA02") ~ "GRA02",
                           str_detect(spectra_name, "GRA03") ~ "GRA03",
                           str_detect(spectra_name, "LOR") ~ "LOR",
                           TRUE ~ "NA"),
         number = stringi::stri_replace_all_regex(spectra_name,group,"") %>% as.numeric(),
         Letter = "Field",
         Sample = case_when(group == "GRA01" & number >= 50 & number < 100 ~ 1,
                        group == "GRA01" & number >= 100 & number < 150 ~ 2,
                        group == "GRA01" & number >= 150 & number < 200 ~ 3,
                        group == "GRA02" ~ 4,
                        group == "GRA03" ~ 5,
                        group == "LOR" & number >= 50 & number < 100 ~ 6,
                        group == "LOR" & number >= 100 & number < 150 ~ 7,
                        group == "LOR" & number >= 150 & number < 200 ~ 8,
                        group == "LOR" & number >= 200 & number < 250 ~ 9,
                        TRUE ~ NA),
         dataset_Name = "ETEL",
         ID = paste(dataset_Name, Sample,Letter, sep = "_")) %>% 
  filter(!is.na(Sample),
         Wavelength %in% c(400:900)) %>% 
  group_by(Wavelength,ID) %>% 
  reframe(mean_RAW = mean(Reflectance),
          Sample = unique(Sample),
          Letter = unique(Letter),
          dataset_Name = unique(dataset_Name)) %>% 
  ungroup() %>% 
  group_by(ID) %>% 
  mutate(mean_STD = (mean_RAW-min(mean_RAW))/(max(mean_RAW)-min(mean_RAW))) %>% 
  relocate(Wavelength, Sample, Letter, mean_STD, mean_RAW, dataset_Name,ID)

ggplot(df_ETE) +
  geom_line(aes(x = Wavelength, y = mean_STD, color = ID))

write_csv(df_ETE, paste0("Output/",unique(df_ETE$dataset_Name),"_STD.csv"))

```











```{r BER}


#### NO NEED TO RUN THIS IF THE CHUNK loop across notebooks HAS ALREADY BEEN RUN 

df_Ber_long <- df %>% 
  pivot_longer(-Wavelength, names_to = "Name",values_to = "ref") %>% 
  mutate(Name = gsub(".asd","",Name),
         Spectra = as.numeric(gsub("\\D", "", Name)),
         dataset_Name = gsub("[[:digit:]]","",Name) %>% 
           gsub("-","",.)) %>% 
  dplyr::filter(str_detect(dataset_Name, "BER"),
                Wavelength >= 400,
                Wavelength <= 950) 


Notebook_BER <- read.delim("Data/Notebook/Sampling_Notebook_BER.txt")


for(i in 1:nrow(Notebook_BER)){
  
  a <- df_Ber_long %>% 
    dplyr::filter(Spectra %in% c(Notebook_BER$Start[i]:Notebook_BER$End[i])) %>% 
    mutate(Sample = Notebook_BER$Sample[i],
           Letter = Notebook_BER$Letter[i],
           Obs = Notebook_BER$Obs[i])
  
  if(i == 1){
    output_BER <- a
  }  else{
    output_BER <- output_BER %>% 
      rbind(a)
  }
  
}

write.csv(output_BER, "Data/CSV/RAW_BER_Spectra.csv")

for(i in 1:length(unique(output_BER$Sample))){
  
  sp <- output_BER %>% 
   dplyr::filter(Sample == unique(output_BER$Sample)[i]) %>% 
    mutate(Letter = case_when(Letter == "A" ~ "Sparse on table",
                              Letter == "B" ~ "Bare Sediment",
                              Letter == "C" ~ "Sparse on Sediment",
                              Letter == "D" ~ "High density"))
  
  plot <- ggplot(sp)+
    geom_line(aes(x = Wavelength, y = ref, color = Letter, group = Name))+
    geom_text(aes(x = 400, y = max(ref)-(max(ref)-min(ref))*0.1, label = paste0("Sample: ", unique(Sample))),
              size = 5, hjust = 0)+
    geom_text(aes(x = 400, y = max(ref)-(max(ref)-min(ref))*0.13, label = paste0("Specie: ", unique(Obs))),
              size = 5, hjust = 0)+
    scale_color_manual(values = c("brown", "red","orange", "grey60"))+
    xlab("Wv (nm)")+
    ylab("Reflectance")+
    theme_Bede()+
    theme(axis.text.x = element_text(size = 15),
          axis.text.y = element_text(size = 15),
          legend.position = "top", 
          legend.key.width = unit(1,"cm"),
          legend.key.height = unit(3,"mm"))
  
  ggsave(paste0("Plot/BER/RAW/Sample",unique(sp$Sample),".jpg" ), plot, width = 10, height = 10, dpi = 200)

}


####  STD 

df_BER_STD <- output_BER %>% 
  dplyr::filter(Wavelength >= 400,
                Wavelength <= 950) %>% 
  group_by(Name) %>% 
  reframe(STD = (ref - min(ref))/(max(ref)-min(ref)),
          Wavelength = Wavelength,
          ref = ref,
          Spectra = Spectra,
          dataset_Name = dataset_Name,
          Sample = Sample,
          Letter = Letter,
          Obs = Obs)


for(i in 1:length(unique(df_BER_STD$Sample))){
  
  sp_STD <- df_BER_STD %>% 
   dplyr::filter(Sample == unique(output_BER$Sample)[i]) %>% 
    mutate(Letter = case_when(Letter == "A" ~ "Sparse on table",
                              Letter == "B" ~ "Bare Sediment",
                              Letter == "C" ~ "Sparse on Sediment",
                              Letter == "D" ~ "High density"))
  
  plot <- ggplot(sp_STD)+
    geom_line(aes(x = Wavelength, y = STD, color = Letter, group = Name))+
    geom_text(aes(x = 400, y = max(ref)-(max(ref)-min(ref))*0.1, label = paste0("Sample: ", unique(Sample))),
              size = 5, hjust = 0)+
    geom_text(aes(x = 400, y = max(ref)-(max(ref)-min(ref))*0.13, label = paste0("Specie: ", unique(Obs))),
              size = 5, hjust = 0)+
    scale_color_manual(values = c("brown", "red","orange", "grey60"))+
    xlab("Wv (nm)")+
    ylab("STD Reflectance")+
    theme_Bede()+
    theme(axis.text.x = element_text(size = 15),
          axis.text.y = element_text(size = 15),
          legend.position = "top", 
          legend.key.width = unit(1,"cm"),
          legend.key.height = unit(3,"mm"))
  
  ggsave(paste0("Plot/BER/STD/Sample",unique(sp_STD$Sample),"_STD.jpg" ), plot, width = 10, height = 10, dpi = 200)

}


```

```{r VIE}

#### NO NEED TO RUN THIS IF THE CHUNK loop across notebooks HAS ALREADY BEEN RUN 


df_VIE_long<- df_long %>% 
  dplyr::filter(dataset_Name == "GRA-VIE",
                Wavelength >= 400,
                Wavelength <= 950)

Notebook_VIE <- read.delim("Data/Notebook/Sampling_Notebook_VIE.txt")

for(i in 1:nrow(Notebook_VIE)){
  
  a <- df_VIE_long %>% 
    dplyr::filter(Spectra %in% c(Notebook_VIE$Start[i]:Notebook_VIE$End[i])) %>% 
    mutate(Sample = Notebook_VIE$Sample[i],
           Letter = Notebook_VIE$Letter[i],
           Obs = Notebook_VIE$Obs[i])
  
  if(i == 1){
    output_VIE <- a
  }  else{
    output_VIE <- output_VIE %>% 
      rbind(a)
  }
  
}


write.csv(output_VIE, "Data/CSV/RAW_VIE_Spectra.csv")

for(i in 1:length(unique(output_VIE$Sample))){
  
  sp <- output_VIE %>% 
   dplyr::filter(Sample == unique(output_VIE$Sample)[i]) 
    # mutate(Letter = case_when(Letter == "A" ~ "High density",
    #                           # Letter == "B" ~ "Bare Sediment",
    #                           Letter == "B" ~ "Sparse on table",
    #                           Letter == "C" ~ "Sparse on Sediment",
    #                           Letter == "D" ~ "NA",
    #                           Letter == "E" ~ "Sediment"))
  
  
  
  
  plot <- ggplot(sp)+
    geom_line(aes(x = Wavelength, y = ref, color = as.factor(Letter), group = Name))+
    geom_text(aes(x = 850, y = 0.68, label = paste0("Sample: ", unique(Sample))),
              size = 5, hjust = 0)+
    geom_text(aes(x = 850, y = 0.65, label = paste0("Specie: ", unique(Obs))),
              size = 5, hjust = 0)+
    scale_color_manual(values = c( "red","orange","orange3","yellow3","yellow4","brown", "grey30","grey40","grey50" ),
                       breaks = c("A",
                                  "B",
                                  "C",
                                  "D",
                                  "E",
                                  "F",
                                  "G",
                                  "H",
                                  "I"), 
                       labels = c("High density","Sparse on table1","Sparse on table2","Sparse on Sediment1","Sparse on Sediment2","Sediment", "Fucus1", "Fucus2", "Fucus3"))+
    xlab("Wv (nm)")+
    ylab("Reflectance")+
    ylim(c(0,0.7))+
    theme_Bede()+
    labs(color = " ")+
    theme(axis.text.x = element_text(size = 15),
          axis.text.y = element_text(size = 15),
          legend.position = "top", 
          legend.key.width = unit(1,"cm"),
          legend.key.height = unit(3,"mm"))
  
  if(file.exists(paste0("Data/Pictures/VIE/Lab/VIE",unique(sp$Sample),".jpg"))){
    img<-rast(paste0("Data/Pictures/VIE/Lab/VIE",unique(sp$Sample),".jpg"))
    
    
    img_plot<-ggplot()+
      geom_spatraster_rgb(data = img)+
      coord_equal()+
      scale_x_continuous(expand = c(0,0))+
      scale_y_continuous(expand = c(0,0))+
      theme_void()
    
    plot <- plot +
      annotation_custom(ggplotGrob(img_plot), xmin = 400, xmax = 670, ymin = 0.4, ymax = 0.72)
    
  }else{
    if(unique(sp$Obs == "Fucus sp.")){
     img<-rast("Data/Pictures/VIE/Lab/fucus.jpg")
    
    
    img_plot<-ggplot()+
      geom_spatraster_rgb(data = img)+
      coord_equal()+
      scale_x_continuous(expand = c(0,0))+
      scale_y_continuous(expand = c(0,0))+
      theme_void()
    
    plot <- plot +
      annotation_custom(ggplotGrob(img_plot), xmin = 400, xmax = 670, ymin = 0.4, ymax = 0.72) 
    }
      
    
    }
  
  ggsave(paste0("Plot/VIE/RAW/Sample",unique(sp$Sample),".jpg" ), plot, width = 10, height = 10, dpi = 200)

}



####  STD 

df_VIE_STD <- output_VIE %>% 
  dplyr::filter(Wavelength >= 400,
                Wavelength <= 950) %>% 
  group_by(Name) %>% 
  reframe(STD = (ref - min(ref))/(max(ref)-min(ref)),
          Wavelength = Wavelength,
          ref = ref,
          Spectra = Spectra,
          dataset_Name = dataset_Name,
          Sample = Sample,
          Letter = Letter,
          Obs = Obs)


for(i in 1:length(unique(df_VIE_STD$Sample))){
  
  sp_STD <- df_VIE_STD %>% 
   dplyr::filter(Sample == unique(output_VIE$Sample)[i])
  
  plot <- ggplot(sp_STD)+
    geom_line(aes(x = Wavelength, y = STD, color = Letter, group = Name))+
    geom_text(aes(x = 400, y = max(ref)-(max(ref)-min(ref))*0.1, label = paste0("Sample: ", unique(Sample))),
              size = 5, hjust = 0)+
    geom_text(aes(x = 400, y = max(ref)-(max(ref)-min(ref))*0.13, label = paste0("Specie: ", unique(Obs))),
              size = 5, hjust = 0)+
    scale_color_manual(values = c( "red","orange","orange3","yellow3","yellow4","brown", "grey30","grey40","grey50" ),
                       breaks = c("A","B","C","D","E","F","G","H","I"), 
                       labels = c("High density","Sparse on table1","Sparse on table2","Sparse on Sediment1","Sparse on Sediment2","Sediment", "Fucus1", "Fucus2", "Fucus3"))+
    xlab("Wv (nm)")+
    ylab("STD Reflectance")+
    theme_Bede()+
    theme(axis.text.x = element_text(size = 15),
          axis.text.y = element_text(size = 15),
          legend.position = "top", 
          legend.key.width = unit(1,"cm"),
          legend.key.height = unit(3,"mm"))
  
  ggsave(paste0("Plot/VIE/STD/Sample",unique(sp_STD$Sample),"_STD.jpg" ), plot, width = 10, height = 10, dpi = 200)

}


```

```{r VANNE}

#### NO NEED TO RUN THIS IF THE CHUNK loop across notebooks HAS ALREADY BEEN RUN 

df_VAN_long<- df_long %>% 
  dplyr::filter(dataset_Name == "GRA-VAN",
                Wavelength >= 400,
                Wavelength <= 950)


Notebook_VAN <- read.delim("Data/Notebook/Sampling_Notebook_VAN.txt")

for(i in 1:nrow(Notebook_VAN)){
  
  a <- df_VAN_long %>% 
    dplyr::filter(Spectra %in% c(Notebook_VAN$Start[i]:Notebook_VAN$End[i])) %>% 
    mutate(Sample = Notebook_VAN$Sample[i],
           Letter = Notebook_VAN$Letter[i],
           Obs = as.character(Notebook_VAN$Obs[i]))
  
  if(i == 1){
    output_VAN <- a
  }  else{
    output_VAN <- output_VAN %>% 
      rbind(a)
  }
  
}

output_VAN <- output_VAN %>% 
  dplyr::filter(Name != "GRA-VAN00810")

write.csv(output_VAN, "Data/CSV/RAW_VAN_Spectra.csv")

for(i in 1:length(unique(output_VAN$Sample))){
  
  sp <- output_VAN %>% 
   dplyr::filter(Sample == unique(output_VAN$Sample)[i]) 
    # mutate(Letter = case_when(Letter == "A" ~ "High density",
    #                           # Letter == "B" ~ "Bare Sediment",
    #                           Letter == "B" ~ "Sparse on table",
    #                           Letter == "C" ~ "Sparse on Sediment",
    #                           Letter == "D" ~ "NA",
    #                           Letter == "E" ~ "Sediment"))
  
  
  unique(sp$Name)
  
  plot <- ggplot(sp)+
    geom_line(aes(x = Wavelength, y = ref, color = as.factor(Letter), group = Name))+
    geom_text(aes(x = 850, y = 0.68, label = paste0("Sample: ", unique(Sample))),
              size = 5, hjust = 0)+
    geom_text(aes(x = 850, y = 0.65, label = paste0("Specie: ", unique(Obs))),
              size = 5, hjust = 0)+
    scale_color_manual(values = c("grey30","orange","red", "green4", "red1", "red4"),
                       breaks = c("A","B","C","D","E","F"), 
                       labels = c("Sparse on Table","Sparse on Sediment","High density", "Green algae", "Red Algae1", "Red Algae2"))+
    xlab("Wv (nm)")+
    ylab("Reflectance")+
    ylim(c(0,0.7))+
    theme_Bede()+
    labs(color = " ")+
    theme(axis.text.x = element_text(size = 15),
          axis.text.y = element_text(size = 15),
          legend.position = "top", 
          legend.key.width = unit(1,"cm"),
          legend.key.height = unit(3,"mm"))
  
  if(file.exists(paste0("Data/Pictures/VAN/Lab/VAN",unique(sp$Sample),".jpg"))){
    img<-rast(paste0("Data/Pictures/VAN/Lab/VAN",unique(sp$Sample),".jpg"))
    
    
    img_plot<-ggplot()+
      geom_spatraster_rgb(data = img)+
      coord_equal()+
      scale_x_continuous(expand = c(0,0))+
      scale_y_continuous(expand = c(0,0))+
      theme_void()
    
    plot <- plot +
      annotation_custom(ggplotGrob(img_plot), xmin = 400, xmax = 670, ymin = 0.4, ymax = 0.72)
    
  }else{
    if(unique(sp$Obs == "Green and Red Algae")){
     img<-rast("Data/Pictures/VAN/Lab/Green_and_Red.jpg")
    
    
    img_plot<-ggplot()+
      geom_spatraster_rgb(data = img)+
      coord_equal()+
      scale_x_continuous(expand = c(0,0))+
      scale_y_continuous(expand = c(0,0))+
      theme_void()
    
    plot <- plot +
      annotation_custom(ggplotGrob(img_plot), xmin = 400, xmax = 670, ymin = 0.4, ymax = 0.72) 
    }
      
    
    }
  
  ggsave(paste0("Plot/VAN/RAW/Sample",unique(sp$Sample),".jpg" ), plot, width = 10, height = 10, dpi = 200)

}




####  STD 

df_VAN_STD <- output_VAN %>% 
  dplyr::filter(Wavelength >= 400,
                Wavelength <= 950) %>% 
  group_by(Name) %>% 
  reframe(STD = (ref - min(ref))/(max(ref)-min(ref)),
          Wavelength = Wavelength,
          ref = ref,
          Spectra = Spectra,
          dataset_Name = dataset_Name,
          Sample = Sample,
          Letter = Letter,
          Obs = Obs)


for(i in 1:length(unique(df_VAN_STD$Sample))){
  
  sp_STD <- df_VAN_STD %>% 
   dplyr::filter(Sample == unique(output_VAN$Sample)[i])
  
  plot <- ggplot(sp_STD)+
    geom_line(aes(x = Wavelength, y = STD, color = Letter, group = Name))+
    geom_text(aes(x = 400, y = max(ref)-(max(ref)-min(ref))*0.1, label = paste0("Sample: ", unique(Sample))),
              size = 5, hjust = 0)+
    geom_text(aes(x = 400, y = max(ref)-(max(ref)-min(ref))*0.13, label = paste0("Specie: ", unique(Obs))),
              size = 5, hjust = 0)+
    scale_color_manual(values = c("grey30","orange","red", "green4", "red1", "red4"),
                       breaks = c("A","B","C","D","E","F"), 
                       labels = c("Sparse on Table","Sparse on Sediment","High density", "Green algae", "Red Algae1", "Red Algae2"))+
    xlab("Wv (nm)")+
    ylab("STD Reflectance")+
    theme_Bede()+
    theme(axis.text.x = element_text(size = 15),
          axis.text.y = element_text(size = 15),
          legend.position = "top", 
          legend.key.width = unit(1,"cm"),
          legend.key.height = unit(3,"mm"))
  
  ggsave(paste0("Plot/VAN/STD/Sample",unique(sp_STD$Sample),"_STD.jpg" ), plot, width = 10, height = 10, dpi = 200)

}



```

